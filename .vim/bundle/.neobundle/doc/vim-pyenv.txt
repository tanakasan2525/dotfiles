*vim-pyenv.txt* Activate a pyenv python within Vim

Version: 1.0
Author:  Alisue <lambdalisue@hashnote.net>          *vim-pyenv-author*
License: MIT license  {{{
    Copyright (c) 2014 Alisue, hashnote.net

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
}}}
  

CONTENTS                                            *vim-pyenv-contents*  

Introduction                    |vim-pyenv-introduction|
Usage                           |vim-pyenv-usage|
Requirements                    |vim-pyenv-requirements|
Interface                       |vim-pyenv-interface|
    Configurations                  |vim-pyenv-configurations|
    Commands                        |vim-pyenv-commands|
    Functions                       |vim-pyenv-functions|
Use with jedi-vim               |vim-pyenv-use-with-jedi-vim|


===============================================================================
INTRODUCTION                                        *vim-pyenv-introduction*

*vim-pyenv* allow you to activate and deactivate the pyenv python correctly
in a live Vim session.
pyenv (https://github.com/yyuu/pyenv) is a simple python version management
system and users can change the python versions with a quite simple way.
However, if you use pyenv to switch the python version or virtualenv, the
omni-completion would not work correctly.
It is because that the Vim refers the system python and does not know anything
about the pyenv python, especially the packages you installed on the pyenv
python.
vim-pyenv activate the pyenv python and add external python's library searching
path (PYTHONPATH) to the Vim internal python's PYTHONPATH.
Thus, with vim-pyenv, your jedi-vim(https://github.com/davidhalter/jedi-vim)
or any kind of python omni-completion system returns a correct completion list.

Additionally, vim-pyenv support the python 2 and python 3 dual system.
If your Vim is compiled with +python and +python3, vim-pyenv automatically
synchronize the python version to the external python version.
If you are using jedi-vim, vim-pyenv automatically change the python version
of jedi-vim as well thus omni-completion works in both python 2 and python 3.


===============================================================================
USAGE                                               *vim-pyenv-usage*

vim-pyenv was developed to enable jedi-vim omni-completion on
pyenv-virtualenv(https://github.com/yyuu/pyenv-virtualenv)
thus you need to enable jedi-vim and pyenv first of all.

Assume you have three pyenv-virtualenv environments (simply call virtualenvs)
and you are now in one of the virtualenvs, called A.
If you open the Vim from a terminal, vim-pyenv automatically detect the
current virtualenv and activate on the Vim session.

If you want to change the virtualenv from A to B then:
>
    :PyenvActivate B
<

And if you want to deactivate the virtualenv then:
>
    :PyenvDeactivate
<

To see the all available virtualenv then:
>
    :PyenvList
<

If your Vim is compiled with +python and +python3, the internal python version
is automatically synchronized to the external python version.
See |vim-pyenv-use-with-jedi-vim| for more detail.


===============================================================================
Requirements                                         *vim-pyenv-requirements*

Requirements:
* Vim compiled with +python and/or +python3
* pyenv command in your terminal

Recommended:
* jedi-vim for omni-completion

===============================================================================
INTERFACE                                           *vim-pyenv-interface*

-------------------------------------------------------------------------------
COMMANDS                                            *vim-pyenv-commands*


:PyenvActivate [{name}]                             *:PyenvActivate*
    Activate a pyenv python. The name of the pyenv python can be completed
    with <tab> at the command line.

    If the name is not specified, the name will be guessed based on the pyenv
    current settings.

:PyenvDeactivate                                    *:PyenvDeactivate*
    Deactivate the current pyenv python.

:PyenvList                                          *:PyenvList*
    List all available pyenv python names.
    See |pyenv#display_pyenv_names()| as well.

:PyenvName                                          *:PyenvName*
    Display the current pyenv python name. The pyenv python is not require to
    be activated in the Vim session.
    See |pyenv#display_pyenv_name()| as well.

:PyenvVersion                                       *:PyenvVersion*
    Display the version number of the internal python.
    See |pyenv#display_py_version()| as well.

:PyenvExternalVersion                               *:PyenvExternalVersion*
    Display the version number of the external python.
    See |pyenv#display_external_py_version()| as well.

:PyenvPython                                        *:PyenvPython*
    Call an internal python which vim-pyenv use.


-------------------------------------------------------------------------------
FUNCTIONS                                           *vim-pyenv-functions*

pyenv#pyenv_name()                      *pyenv#pyenv_name()*
    Return the current pyenv python name. The pyenv python is not require to
    be activated in the Vim session.
    If you need to know the activated pyenv name, see |pyenv#activated_name()|
    instead.
    See |pyenv#display_pyenv_name()| as well.

pyenv#activated_pyenv_name()            *pyenv#activated_pyenv_name()*
    Return the current activated pyenv python name.

pyenv#pyenv_names({prefix})             *pyenv#pyenv_names()*
    Return the list of available pyenv python names. The result list are
    filtered with {prefix}.
    See |pyenv#display_pyenv_names()| as well.

pyenv#py_version()                      *pyenv#py_version()*
    Return the version number of the internal python.
    See |pyenv#display_py_version()| as well.

pyenv#external_py_version()             *pyenv#external_py_version()*
    Return the version number of the external python.
    See |pyenv#display_external_py_version()| as well.

pyenv#display_pyenv_name()              *pyenv#display_pyenv_name()*
    Display the current pyenv python name. The pyenv python is not require to
    be activated in the Vim session.
    See |:PyenvName| as well.

pyenv#display_pyenv_names()             *pyenv#display_pyenv_names()*
    List all available pyenv python names.
    See |:PyenvList| as well.

pyenv#display_py_version()              *pyenv#display_py_version()*
    Display the version number of the internal python.
    See |:PyenvVersion| as well.

pyenv#display_external_py_version()     *pyenv#display_external_py_version()*
    Display the version number of the external python.
    See |:PyenvExternalVersion| as well.

pyenv#activate({name}, {verbose})       *pyenv#activate()*
    Activate the {name} pyenv python.
    If empty string is specified in {name}, the current pyenv python is used.

pyenv#deactivate({verbose})             *pyenv#deactivate()*
    Deactivate the current pyenv python.

pyenv#statusline#component()            *pyenv#statusline#component()*
    Return the current pyenv python name and the version of the internal
    python. It is used for indicate the current situation in the statusline or
    the lightline(https://github.com/itchyny/lightline.vim).

    The return value is formatted with the following rule:

    1.  If the name and the version is different,
        *g:pyenv#statusline#component#long_pattern* is used to format and the
        return value looks like "⌘ system(3.4.0)" in default.
    2.  If the name and the version is equal,
        *g:pyenv#statusline#component#short_pattern* is used to format and the
        return value looks like "⌘ 3.4.0" in default.
    3.  If the name is not provided,
        *g:pyenv#statusline#component#without_pattern* is used to format and
        the return value is empty in default.

    The special characters '%e' and '%v' in the pattern are substituted to the
    pyenv python name and the version respectively.

    
-------------------------------------------------------------------------------
CONFIGURATION                                       *vim-pyenv-configuration*

g:pyenv#enable                          *g:pyenv#enable*
    If it is 0, vim-pyenv is disabled.

    Default to 1.

g:pyenv#auto_activate                   *g:pyenv#auto_activate*
    If it is 1, vim-pyenv automatically activate the current pyenv python when
    the vim-pyenv is loaded.

    Default to 1.

g:pyenv#force_py_version                *g:pyenv#force_py_version*
    Specify the python version which vim-pyenv use internally.
    The python version numbers, 2 or 3, are accepted. 
    The Vim need to be compiled with +python (for 2) or +python3 (for 3).
    This value would be ignored when the |g:pyenv#auto_force_py_version| is
    enabled.

    Default to 2.

g:pyenv#auto_force_py_version           *g:pyenv#auto_force_py_version*
    If it is 1, the internal python version used would be automatically
    synchronized with the external python version.
    It requires Vim to compiled with +python and +python3.

    This feature is quite useful when it is used with jedi-vim.
    See |g:pyenv#auto_force_py_version_jedi| as well.

    Default to 0.   (when -python or -python3)
            to 1.   (when +python and +python3)

g:pyenv#auto_force_py_version_jedi      *g:pyenv#auto_force_py_version_jedi*
    If it is 1 and jedi-vim is loaded, jedi#force_py_version is called with
    the vim-pyenv internal python version when the version has changed.

    To enable bi-directional omni-completion, you should turn on this feature.
    See |g:pyenv#auto_force_py_version| as well.

    Default to 1.

g:pyenv#pyenv_root                      *g:pyenv#pyenv_root*
    The path of pyenv root directory.
    When 'auto' is specified, the absolute pyenv root path would be
    guessed.

    Default to 'auto'.

g:pyenv#pyenv_exec                      *g:pyenv#pyenv_exec*
    The path of pyenv executable.

    Default to 'auto'.

g:pyenv#python_exec                     *g:pyenv#python_exec*
    The path of python executable.

    Default to 'auto'.

g:pyenv#squelch_py_warning              *g:pyenv#squelch_py_warning*
    Define this variable to suppress the
    'vim-pyenv requires vim compiled with...' warning.

    Not defined.

g:pyenv#activated_name                  *g:pyenv#activated_name*
    The current vim-pyenv activated pyenv python name.
    This variable is not defined when no pyenv python is activated.

    Not defined.


===============================================================================
USE WITH JEDI VIM                               *vim-pyenv-use-with-jedi-vim*

If your Vim is compiled with +python and +python3, vim-pyenv automatically
synchronize the internal python version to the external python version.
It allow you to use correct python version via |:PyenvPython| command.

Additionally, user can change the python version which jedi-vim internally
use with |jedi#force_py_version()| command and vim-pyenv automatically call
it in pyenv activation and deactivation.
It allow you to use corrcet omni-completion via jedi-vim.
To enable this feature, you need to set |g:pyenv#auto_force_py_version_jedi|
to 1 and the vim-pyenv must be loaded after the jedi-vim had loaded.

